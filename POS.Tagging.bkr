{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "TeX",
            "plugin": "TeX",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n",
            "view": {
                "cm": {
                    "mode": "python"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "codefiQeP9",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#import statements",
                    "import string",
                    "import math",
                    "from collections import Counter as ct",
                    "from nltk.tokenize import word_tokenize as wordTok",
                    "from nltk.tag import pos_tag"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codexXDRIh",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#function to remove problem characters",
                    "def removeNonAscii(text):",
                    "    return ''.join(i for i in text if ord(i)<128)"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codeaoJsbU",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#open, read, remove problem characters, remove punctuation for tokenization",
                    "teslaSummary = removeNonAscii(open(",
                    "        \"D:\\Google Drive\\Grad School\\UIC\\MS-MIS\\IDS566\\Assignment3\\TeslaSummary1.txt\", \"r\").read()).translate(None, string.punctuation)",
                    "NYTimes = removeNonAscii(open(",
                    "        \"D:\\Google Drive\\Grad School\\UIC\\MS-MIS\\IDS566\\Assignment3\\NYTimes.txt\", \"r\").read()).translate(None, string.punctuation)",
                    "ESPN = removeNonAscii(open(",
                    "        \"D:\\Google Drive\\Grad School\\UIC\\MS-MIS\\IDS566\\Assignment3\\ESPN.txt\", \"r\").read()).translate(None, string.punctuation)"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codeeekWFL",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#tokenize the words",
                    "teslaSummaryTok = wordTok(teslaSummary)",
                    "NYTimesTok = wordTok(NYTimes)",
                    "ESPNTok = wordTok(ESPN)"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "code9u5rD2",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#tag the tokens",
                    "teslaSummaryPOS = pos_tag(teslaSummaryTok)",
                    "NYTimesPOS = pos_tag(NYTimesTok)",
                    "ESPNPOS = pos_tag(ESPNTok)"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codeINcvJS",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#declare the list and dictionary variable that are about to be used",
                    "teslaSummaryTags = []",
                    "NYTimesTags = []",
                    "ESPNTags = []",
                    "#teslaSumTagCount = {}",
                    "#NYTimesTagCount = {}",
                    "#ESPNTagCount = {}",
                    "teslaSubLinearNorm = {}",
                    "NYTimesSubLinearNorm = {}",
                    "ESPNSubLinearNorm = {}"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codejVaDRt",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#pull out only the tags, leave the words behind",
                    "x = 0",
                    "y = 0",
                    "z = 0",
                    "for i in teslaSummaryPOS:",
                    "    teslaSummaryTags.append(teslaSummaryPOS[x][1])",
                    "    x += 1",
                    "for i in NYTimesPOS:",
                    "    NYTimesTags.append(NYTimesPOS[y][1])",
                    "    y += 1",
                    "for i in ESPNPOS:",
                    "    ESPNTags.append(ESPNPOS[z][1])",
                    "    z +=1"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codeCjSDPO",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#count the tags",
                    "teslaSumTagCount = ct(teslaSummaryTags)",
                    "NYTimesTagCount = ct(NYTimesTags)",
                    "ESPNTagCount = ct(ESPNTags)"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codebhYXgJ",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#sublinear normalization",
                    "for key in teslaSumTagCount:",
                    "    x = teslaSumTagCount[key]",
                    "    if x > 0:",
                    "        teslaSubLinearNorm[key] =  1 + math.log(x)",
                    "for key in NYTimesTagCount:",
                    "    x = NYTimesTagCount[key]",
                    "    if x > 0:",
                    "        NYTimesSubLinearNorm[key] =  1 + math.log(x)",
                    "for key in ESPNTagCount:",
                    "    x = ESPNTagCount[key]",
                    "    if x > 0:",
                    "        ESPNSubLinearNorm[key] =  1 + math.log(x)"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codeU4hcKY",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#intersections",
                    "tesNYIntersection = {}",
                    "for item in teslaSubLinearNorm:",
                    "    if item in NYTimesSubLinearNorm:",
                    "        tesNYIntersection[item] = teslaSubLinearNorm[item] + NYTimesSubLinearNorm[item]",
                    "",
                    "tesESPNIntersection = {}",
                    "for item in teslaSubLinearNorm:",
                    "    if item in ESPNSubLinearNorm:",
                    "        tesESPNIntersection[item] = teslaSubLinearNorm[item] + ESPNSubLinearNorm[item]",
                    "",
                    "NYESPNIntersection = {}",
                    "for item in NYTimesSubLinearNorm:",
                    "    if item in ESPNSubLinearNorm:",
                    "        NYESPNIntersection[item] = NYTimesSubLinearNorm[item] + ESPNSubLinearNorm[item]"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codeGYrApB",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#unions - I'm sure there is a more efficient way to do this but I don't know what it is",
                    "tesNYUnion = {}",
                    "for item in teslaSubLinearNorm:",
                    "    if item in NYTimesSubLinearNorm:",
                    "        tesNYUnion[item] = teslaSubLinearNorm[item] + NYTimesSubLinearNorm[item]",
                    "    else:",
                    "        tesNYUnion[item] = teslaSubLinearNorm[item]",
                    "for item in NYTimesSubLinearNorm:",
                    "    if item not in teslaSubLinearNorm:",
                    "        tesNYUnion[item] = NYTimesSubLinearNorm[item]",
                    "        ",
                    "tesESPNUnion = {}",
                    "for item in teslaSubLinearNorm:",
                    "    if item in ESPNSubLinearNorm:",
                    "        tesESPNUnion[item] = teslaSubLinearNorm[item] + ESPNSubLinearNorm[item]",
                    "    else:",
                    "        tesESPNUnion[item] = teslaSubLinearNorm[item]",
                    "for item in ESPNSubLinearNorm:",
                    "    if item not in teslaSubLinearNorm:",
                    "        tesESPNUnion[item] = ESPNSubLinearNorm[item]",
                    "        ",
                    "NYESPNUnion = {}",
                    "for item in NYTimesSubLinearNorm:",
                    "    if item in ESPNSubLinearNorm:",
                    "        NYESPNUnion[item] = NYTimesSubLinearNorm[item] + ESPNSubLinearNorm[item]",
                    "    else:",
                    "        NYESPNUnion[item] = NYTimesSubLinearNorm[item]",
                    "for item in ESPNSubLinearNorm:",
                    "    if item not in NYTimesSubLinearNorm:",
                    "        NYESPNUnion[item] = ESPNSubLinearNorm[item]"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codedVxwYI",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#summations",
                    "tesNYIntSum = float(sum(tesNYIntersection.values()))",
                    "tesESPNIntSum = float(sum(tesESPNIntersection.values()))",
                    "NYESPNIntSum = float(sum(NYESPNIntersection.values()))",
                    "tesNYUnSum = float(sum(tesNYUnion.values()))",
                    "tesESPNUnSum = float(sum(tesESPNUnion.values()))",
                    "NYESPNUnSum = float(sum(NYESPNUnion.values()))"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codeL6FBO9",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "#calculate jaccard sim",
                    "tesNYJaccard = tesNYIntSum / tesNYUnSum",
                    "tesESPNJaccard = tesESPNIntSum / tesESPNUnSum",
                    "NYESPNJaccard = NYESPNIntSum / NYESPNUnSum"
                ]
            },
            "output": {
                "result": "",
                "selectedType": "Hidden",
                "state": {},
                "height": 34
            },
            "evaluatorReader": true
        },
        {
            "id": "codefoi4fd",
            "evaluator": "IPython",
            "type": "code",
            "input": {
                "body": [
                    "print tesNYJaccard, tesESPNJaccard, NYESPNJaccard"
                ]
            },
            "output": {
                "state": {}
            },
            "evaluatorReader": true
        }
    ],
    "tagMap": {
        "root": [
            "codefiQeP9",
            "codexXDRIh",
            "codeaoJsbU",
            "codeeekWFL",
            "code9u5rD2",
            "codeINcvJS",
            "codejVaDRt",
            "codeCjSDPO",
            "codebhYXgJ",
            "codeU4hcKY",
            "codeGYrApB",
            "codedVxwYI",
            "codeL6FBO9",
            "codefoi4fd"
        ]
    },
    "tagMap2": {
        "initialization": [],
        "IPython": [
            "codefiQeP9",
            "codexXDRIh",
            "codeaoJsbU",
            "codeeekWFL",
            "code9u5rD2",
            "codeINcvJS",
            "codejVaDRt",
            "codeCjSDPO",
            "codebhYXgJ",
            "codeU4hcKY",
            "codeGYrApB",
            "codedVxwYI",
            "codeL6FBO9",
            "codefoi4fd"
        ]
    },
    "namespace": {}
}
